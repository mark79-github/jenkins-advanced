<?xml version='1.1' encoding='UTF-8'?>
<flow-definition plugin="workflow-job@1282.ve6d865025906">
  <actions>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5"/>
    <org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction plugin="pipeline-model-definition@2.2118.v31fd5b_9944b_5">
      <jobProperties/>
      <triggers/>
      <parameters/>
      <options/>
    </org.jenkinsci.plugins.pipeline.modeldefinition.actions.DeclarativeJobPropertyTrackerAction>
  </actions>
  <description></description>
  <keepDependencies>false</keepDependencies>
  <properties>
    <com.coravy.hudson.plugins.github.GithubProjectProperty plugin="github@1.37.0">
      <projectUrl>http://192.168.34.202:3000/douser/bgapp.git/</projectUrl>
      <displayName></displayName>
    </com.coravy.hudson.plugins.github.GithubProjectProperty>
    <org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
      <triggers>
        <com.cloudbees.jenkins.GitHubPushTrigger plugin="github@1.37.0">
          <spec></spec>
        </com.cloudbees.jenkins.GitHubPushTrigger>
        <hudson.triggers.SCMTrigger>
          <spec></spec>
          <ignorePostCommitHooks>false</ignorePostCommitHooks>
        </hudson.triggers.SCMTrigger>
      </triggers>
    </org.jenkinsci.plugins.workflow.job.properties.PipelineTriggersJobProperty>
  </properties>
  <definition class="org.jenkinsci.plugins.workflow.cps.CpsFlowDefinition" plugin="workflow-cps@3624.v43b_a_38b_62b_b_7">
    <script>pipeline
{
  environment
  {
    DOCKERHUB_CREDENTIALS=credentials(&quot;docker-hub&quot;)

    GITEA_SERVER = &quot;http://192.168.34.202:3000&quot;
    GITEA_ACCOUNT = &quot;douser&quot;
    GITEA_REPOSITORY = &quot;bgapp&quot;

    DOCKER_COMPOSE_DEVELOPMENT=&quot;development/docker-compose.yaml&quot;     
    DOCKER_COMPOSE_PRODUCTION=&quot;production/docker-compose.yaml&quot;       

    WEB_IMAGE = &quot;img-web&quot;
    DB_IMAGE = &quot;img-db&quot;
  }

  agent
  {
    label &quot;docker-node&quot;
  }

  stages
  {
    stage(&quot;Downloading the project from your Gitea repository&quot;)      
    {
      steps
      {
        git branch: &quot;main&quot;, url: &quot;${GITEA_SERVER}/${GITEA_ACCOUNT}/${GITEA_REPOSITORY}.git&quot;
      }
    }

    stage(&quot;Prepare volumes&quot;)
    {
      steps
      {
        sh &apos;sudo rm -r /home/vagrant/web || true&apos;
        sh &apos;sudo cp -r ./web /home/vagrant/web&apos;
      }
    }

    stage(&quot;Deploy on development&quot;)
    {
      steps
      {
        sh &apos;docker compose -f $DOCKER_COMPOSE_DEVELOPMENT down || true&apos;
        sh &apos;docker compose -f $DOCKER_COMPOSE_DEVELOPMENT up -d --wait&apos;
      }
    }

    stage(&quot;Testing the application for reachability on development&quot;) 
    {
      steps
      {
        script
        {
          echo &quot;Test #1 - reachability&quot;
          sh &apos;echo $(curl --write-out &quot;%{http_code}&quot; --silent --output /dev/null http://localhost:8080) | grep 200&apos;

          sleep(time: 30, unit: &quot;SECONDS&quot;)

          echo &quot;Test #2 - Test if db is up and running&quot;
          sh &apos;echo $(curl -silent http://localhost:8080) | grep -oh &quot;\\w*Русе\\w*&quot;&apos;
        }
      }
    }

    stage(&quot;Publishing the images to Docker Hub&quot;)
    {
      steps
      {
        sh &apos;echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin&apos;
        
        sh &apos;docker image tag $WEB_IMAGE $DOCKERHUB_CREDENTIALS_USR/$WEB_IMAGE&apos;
        sh &apos;docker image tag $DB_IMAGE $DOCKERHUB_CREDENTIALS_USR/$DB_IMAGE&apos;

        sh &apos;docker push $DOCKERHUB_CREDENTIALS_USR/$WEB_IMAGE&apos;   
        sh &apos;docker push $DOCKERHUB_CREDENTIALS_USR/$DB_IMAGE&apos;        
      }
    }

    stage(&quot;Stopping the application and removing the containers&quot;)    
    {
      steps
      {
        sh &apos;docker compose -f $DOCKER_COMPOSE_DEVELOPMENT down --rmi all || true&apos;
      }
    }

    stage(&quot;Deploy on production&quot;)
    {
      steps
      {
        sh &apos;docker image rm $DOCKERHUB_CREDENTIALS_USR/$WEB_IMAGE || true&apos;
        sh &apos;docker image rm $DOCKERHUB_CREDENTIALS_USR/$DB_IMAGE || true&apos;

        sh &apos;docker compose -f $DOCKER_COMPOSE_PRODUCTION down || true&apos;
        sh &apos;docker compose -f $DOCKER_COMPOSE_PRODUCTION up -d --wait&apos;
      }
    }
  }

  post
  {
    always
    {
      cleanWs()
    }
  }
}
</script>
    <sandbox>true</sandbox>
  </definition>
  <triggers/>
  <disabled>false</disabled>
</flow-definition>
